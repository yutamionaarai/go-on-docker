openapi: "3.0.3"

info:
  title: "Todo API"
  version: "1.0.0"
servers:
  - url: http://localhost:8080
    description: ローカル環境
tags:
  - name: todo
paths:
  /todos:
    get:
       tags:
        - todo
       summary: todoを取得
       description: userIdを指定してユーザーが所持しているtodoを全て取得します
       operationId: findTodos
       parameters:
        - name: userId
          in: query
          description: ユーザーID
          required: true
          explode: true
          schema:
            type: integer
       responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'          
        '400':
          description: 不正な入力値
        '500':
          description: サーバーエラー
    post:
      tags:
        - todo
      summary: todoを登録
      description: 新しいtodoを登録します
      operationId: addTodo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
        required: true
      responses:
        '200':
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'          
        '400':
          description: 不正な入力値
        '500':
          description: サーバーエラー
  /todos/{id}:
    get:
      tags:
        - todo
      summary: todoを取得
      description: idを指定してtodoを取得します
      operationId: getTodo
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'          
        '400':
          description: 不正な入力値
        '404':
          description: 存在しないID
        '500':
          description: サーバーエラー
    put:
      tags:
        - todo
      summary: todoを更新
      description: idを指定してtodoを更新します
      operationId: updateTodo
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
        required: true
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'          
        '400':
          description: 不正な入力値
        '404':
          description: 存在しないID
        '500':
          description: サーバーエラー
    delete:
      summary: todoを削除
      description: idを指定してtodoを削除します
      operationId: deleteTodo
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: 削除成功
        '400':
          description: 不正な入力値
        '404':
          description: 存在しないID
        '500':
          description: サーバーエラー
components:
  schemas:
    TodoRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1234
        title:
          type: string
        description:
          type: string
        priority:
          type: integer
          format: int64
          example: 10
        status:
          type: string
        expiration_date:
          type: string
          format: date-time
          example: '2020-01-31T23:59:59+09:00'
      required:
        - userId
        - title
    TodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 1234
        title:
          type: string
        description:
          type: string
        priority:
          type: integer
          format: int64
          example: 10
        status:
          type: string
        expiration_date:
          type: string
          format: date-time
          example: '2020-01-31T23:59:59+09:00'
      required:
        - id
        - userId
        - title  